import io.micrometer.core.instrument.Counter
import io.micrometer.core.instrument.MeterRegistry
import io.mockk.MockKAnnotations
import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

class DigitalPromoProcessorTest {

    private lateinit var digitalPromoProcessor: DigitalPromoProcessor
    private lateinit var registry: MeterRegistry

    @BeforeEach
    fun setUp() {
        registry = mockk(relaxed = true)
        digitalPromoProcessor = DigitalPromoProcessor(registry) // Inject the mock into your class
        MockKAnnotations.init(this)
    }

    @Test
    fun `test setMetricsConfig`() {
        // When
        digitalPromoProcessor.setMetricsConfig()

        // Then
        // Verify that Counter instances are created and registered
        verify(exactly = 1) {
            Counter.builder("kafka.receive.success.count")
                .description("Total number of messages processed")
                .baseUnit(PromoDefConstants.METRICS_COUNTER_BASE_UNIT)
                .register(registry)
        }

        verify(exactly = 1) {
            Counter.builder("kafka.receive.error.count")
                .description("Total number of messages processed")
                .baseUnit(PromoDefConstants.METRICS_COUNTER_BASE_UNIT)
                .register(registry)
        }
    }
}
