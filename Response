import io.mockk.Called
import io.mockk.MockKAnnotations
import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import reactor.core.publisher.Mono
import java.time.Duration

class PromoServiceTest {

    private val promoService = PromoService()

    private val cassandraOperations = mockk<CassandraOperations> {
        every {
            insert(any(), any())
        } returns Mono.empty()
    }

    private val kafkaConfig = KafkaConfig() // Create a KafkaConfig object with necessary properties

    private val objectMapper = ObjectMapper() // Create an instance of ObjectMapper

    @BeforeEach
    fun setUp() {
        MockKAnnotations.init(this)
        promoService.cassandraOperations = cassandraOperations
        promoService.kafkaConfig = kafkaConfig
        promoService.objectMapper = objectMapper
    }

    @Test
    fun `test savePromoToDB success`() {
        // Given
        val promo = createSamplePromo() // Create a sample promo object

        // When
        promoService.savePromoToDB(promo)

        // Then
        // Verify that cassandraOperations.insert is called twice
        verify(exactly = 2) { cassandraOperations.insert(any(), any()) }
    }

    private fun createSamplePromo(): Promo {
        // Create and return a sample Promo object here
    }
}
