import org.junit.jupiter.api.Test
import org.mockito.Mockito
import org.springframework.retry.RetryCallback
import org.springframework.retry.support.RetryTemplate
import org.springframework.web.client.RestTemplate
import reactor.test.StepVerifier

class PricingServiceTest {

    private val restTemplate = Mockito.mock(RestTemplate::class.java)
    private val retryTemplate = RetryTemplate()

    private val pricingService = PricingService(restTemplate, retryTemplate)

    @Test
    fun `test getPricingResponse with circuit breaker and retry`() {
        val skuId = "12345"
        val expectedPricingResponse = PricingResponse(skuId = skuId, listPrice = 10.99)

        // Mock RestTemplate to throw an exception for the first call and return the response for the second call
        Mockito.`when`(restTemplate.getForObject(Mockito.anyString(), Mockito.eq(PricingResponse::class.java)))
            .thenThrow(RuntimeException("Connection error"))
            .thenReturn(expectedPricingResponse)

        // Call the method and verify the behavior
        val result = pricingService.getPricingResponse(skuId)

        StepVerifier.create(result)
            .expectNext(expectedPricingResponse)
            .expectComplete()
            .verify()

        // Verify that the circuit breaker was opened and then closed due to retry
        Mockito.verify(restTemplate, Mockito.times(2)).getForObject(Mockito.anyString(), Mockito.eq(PricingResponse::class.java))
    }
}

//---------------------------

import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig
import io.github.resilience4j.retry.RetryConfig
import io.mockk.every
import io.mockk.mockk
import io.mockk.mockkStatic
import kotlinx.coroutines.runBlocking
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.client.RestTemplate
import reactor.core.publisher.Mono
import reactor.test.StepVerifier
import java.time.Duration

class PricingServiceTest {

    private lateinit var restTemplate: RestTemplate
    private lateinit var pricingService: PricingService

    @BeforeEach
    fun setup() {
        restTemplate = mockk()
        pricingService = PricingService(restTemplate)
    }

    @Test
    fun `test getPricingResponse with success`() {
        val skuId = "12345"
        val url = "https://example.com/pricing/$skuId"
        val pricingResponse = PricingResponse(skuId, "store1", "context1", null, null, null, 10.99)

        every { restTemplate.getForObject(url, PricingResponse::class.java) } returns pricingResponse

        val result = pricingService.getPricingResponse(skuId)

        StepVerifier.create(result)
            .expectNext(pricingResponse)
            .verifyComplete()
    }

    @Test
    fun `test getPricingResponse with retry and circuit breaker`() {
        val skuId = "12345"
        val url = "https://example.com/pricing/$skuId"
        val retryConfig = RetryConfig.custom<PricingService>("pricing-api-retry")
            .maxAttempts(3)
            .waitDuration(Duration.ofMillis(100))
            .build()

        mockkStatic("java.lang.Thread")
        every { Thread.sleep(100) } returns Unit

        val pricingResponse = PricingResponse(skuId, "store1", "context1", null, null, null, 10.99)
        every { restTemplate.getForObject(url, PricingResponse::class.java) } throws HttpServerErrorException(HttpStatus.SERVICE_UNAVAILABLE)

        val result = runBlocking { pricingService.getPricingResponse(skuId).block() }

        assert(result == null)
    }
}


//------------------------

import org.junit.jupiter.api.Test
import org.mockito.ArgumentMatchers.any
import org.mockito.Mockito
import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest
import org.springframework.boot.test.mock.mockito.MockBean
import org.springframework.test.web.reactive.server.WebTestClient
import reactor.core.publisher.Mono

@WebFluxTest
class PricingServiceTest {

    @MockBean
    private lateinit var webClient: WebClient

    @Test
    fun `test getPricingResponse with circuit breaker open`() {
        val skuId = "12345"

        val mockResponse = WebClientResponseException.create(HttpStatus.SERVICE_UNAVAILABLE.value(), HttpStatus.SERVICE_UNAVAILABLE.reasonPhrase, null, null, null)
        Mockito.`when`(webClient.get().uri(any()).retrieve().bodyToMono(PricingResponse::class.java)).thenReturn(Mono.error(mockResponse))

        val webTestClient = WebTestClient.bindToServer().baseUrl("http://localhost").build()

        val result = webTestClient.get().uri("/pricing/$skuId").exchange()

        result.expectStatus().is5xxServerError
    }
}


